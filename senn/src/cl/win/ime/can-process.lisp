(defpackage :senn.win.ime.can-process
  (:use :cl :senn.win.ime)
  (:export :execute))
(in-package :senn.win.ime.can-process)

(defgeneric execute (ime state mode key))

(defmethod execute ((ime senn.im:ime)
                    (s editing)
                    (mode (eql :direct))
                    (key senn.win.keys:key))
  t)

(defmethod execute ((ime senn.im:ime)
                    (s converting)
                    (mode (eql :direct))
                    (key senn.win.keys:key))
  t)

(defmethod execute ((ime senn.im:ime)
                    (s t)
                    (mode (eql :direct))
                    (key senn.win.keys:key))
  nil)

(defmethod execute ((ime senn.im:ime)
                    (s converting)
                    (mode (eql :hiragana))
                    (key senn.win.keys:key))
  (cond ((senn.win.keys:enter-p key) t)
        ((or (senn.win.keys:space-p key)
             (senn.win.keys:down-p key))
         t)
        ((senn.win.keys:up-p key) t)
        ((senn.win.keys:left-p key) t)
        ((senn.win.keys:right-p key) t)
        (t nil)))

(defmethod execute ((ime senn.im:ime)
                    (s editing)
                    (mode (eql :hiragana))
                    (key senn.win.keys:key))
  (cond ((senn.win.keys:oem-minus-p key) t)
        ((senn.win.keys:oem-7-p key) t)
        ((senn.win.keys:oem-5-p key) t)
        ((senn.win.keys:oem-3-p key) t)
        ((senn.win.keys:oem-4-p key) t)
        ((senn.win.keys:oem-plus-p key) t)
        ((senn.win.keys:oem-1-p key) t)
        ((senn.win.keys:oem-6-p key) t)
        ((senn.win.keys:oem-comma-p key) t)
        ((senn.win.keys:oem-period-p key) t)
        ((senn.win.keys:oem-2-p key) t)
        ((senn.win.keys:oem-102-p key) t)
        ((senn.win.keys:number-p key) t)
        ((senn.win.keys:alphabet-p key) t)
        ((senn.win.keys:backspace-p key)
         (let ((pron (senn.buffer:buffer-string (editing-buffer s))))
           ;; IMEが文字を削除していない -> OSに文字を削除してもらう
           (not (string= pron ""))))
        ((senn.win.keys:space-p key)
         (let ((pron (senn.buffer:buffer-string (editing-buffer s))))
           (not (string= pron ""))))
        ((senn.win.keys:enter-p key) t)
        (t nil)))
